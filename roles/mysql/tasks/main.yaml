- name: Install mysql-server
  apt:
    name: mysql-server
    
- name: Install PyMySQL
  apt:
    name: python3-pymysql

- name: Sleep for 10 seconds and continue with play
  wait_for:
    timeout: 10 

- name: Template /etc/mysql/mysql.conf.d/override.cnf with override.cnf.j2
  ansible.builtin.template:
    src: override.cnf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
  notify: 
   - Restart mysql

- name: MySQL database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: MySQL user
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%" 
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true


- name: Create user exporter
  community.mysql.mysql_user:
    name: "{{ mysql_exporter_user }}"
    password: "{{mysql_exporter_pass}}"
    priv:
      '*.*': 'PROCESS,REPLICATION CLIENT,SELECT'
    login_unix_socket: /var/run/mysqld/mysqld.sock 
  no_log: true

 
- name: Create MySQL replication user
  mysql_user:
    name: "{{ replication_user }}"
    password: "{{ replication_password }}"
    priv: "*.*:REPLICATION SLAVE"
    host: "%"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Ensure mysql is started
  service:
    name: mysql
    state: started
    enabled: yes
  
- name: Set read only parameter
  community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica
